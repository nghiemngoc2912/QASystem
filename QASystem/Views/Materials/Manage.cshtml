@model QASystem.ViewModels.MaterialListViewModel

<h2>Manage Materials</h2>

<div class="mb-3">
    <a asp-action="AddMaterial" class="btn btn-success">Add New Material</a>
</div>

<form asp-action="Manage" method="get" class="mb-3">
    <div class="input-group" style="max-width: 400px;">
        <input type="text" name="searchTerm" class="form-control" placeholder="Search by title or description" value="@Model.SearchTerm" />
        <button type="submit" class="btn btn-primary">Search</button>
        <a asp-action="Manage" class="btn btn-secondary">Clear</a>
    </div>
    <input type="hidden" name="sortOrder" value="@Model.SortOrder" />
    <input type="hidden" name="pageNumber" value="1" />
</form>

<div class="mb-3">
    Sort by Created Date:
    <a asp-action="Manage" asp-route-searchTerm="@Model.SearchTerm" asp-route-sortOrder="desc" asp-route-pageNumber="1" class="btn btn-sm btn-outline-primary @(Model.SortOrder == "desc" ? "active" : "")">Newest First</a>
    <a asp-action="Manage" asp-route-searchTerm="@Model.SearchTerm" asp-route-sortOrder="asc" asp-route-pageNumber="1" class="btn btn-sm btn-outline-primary @(Model.SortOrder == "asc" ? "active" : "")">Oldest First</a>
</div>

<div id="manageMaterialsList">
    @await Html.PartialAsync("_ManageMaterialsListPartial", Model)
</div>

<style>
    .table {
        table-layout: fixed;
    }


    .table th, .table td {
        vertical-align: middle;
        word-wrap: break-word;
    }

    .text-truncate {
        max-width: 100%;
    }
</style>

@section Scripts {
    <!-- Thêm SignalR client library -->
    <script src="~/lib/signalr/signalr.min.js"></script>
    <script>
        // Kết nối với SignalR Hub
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/materialHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Bắt đầu kết nối
        connection.start()
            .then(() => console.log("Connected to MaterialHub"))
            .catch(err => console.error("Error connecting to MaterialHub:", err));

        // Xử lý thông báo từ server
        connection.on("ReceiveMaterialUpdate", (action, materialId) => {
            console.log(`Received update: ${action} Material ID: ${materialId}`);
            // Lấy các tham số hiện tại từ URL
            const urlParams = new URLSearchParams(window.location.search);
            const searchTerm = urlParams.get('searchTerm') || '';
            const sortOrder = urlParams.get('sortOrder') || 'desc';
            const pageNumber = urlParams.get('pageNumber') || '1';

            // Gửi yêu cầu AJAX để lấy danh sách mới
            fetch(`/Materials/GetManageMaterialsPartial?searchTerm=${encodeURIComponent(searchTerm)}&sortOrder=${sortOrder}&pageNumber=${pageNumber}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('manageMaterialsList').innerHTML = html;
                })
                .catch(err => console.error("Error updating manage materials list:", err));
        });
    </script>
}